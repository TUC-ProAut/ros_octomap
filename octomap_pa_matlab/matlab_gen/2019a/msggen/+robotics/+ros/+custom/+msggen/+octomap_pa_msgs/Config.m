classdef Config < robotics.ros.Message
    %Config MATLAB implementation of octomap_pa_msgs/Config
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'octomap_pa_msgs/Config' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5b5b5b10928fb5081cc635e36c8b7a05' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        OctomapPaMsgsConfigBaseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('octomap_pa_msgs/ConfigBase') % Dispatch to MATLAB class for message type octomap_pa_msgs/ConfigBase
        OctomapPaMsgsConfigDegradingClass = robotics.ros.msg.internal.MessageFactory.getClassForType('octomap_pa_msgs/ConfigDegrading') % Dispatch to MATLAB class for message type octomap_pa_msgs/ConfigDegrading
        OctomapPaMsgsConfigInsertionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('octomap_pa_msgs/ConfigInsertion') % Dispatch to MATLAB class for message type octomap_pa_msgs/ConfigInsertion
    end
    
    properties (Dependent)
        Base
        Insertion
        Degrading
    end
    
    properties (Access = protected)
        Cache = struct('Base', [], 'Insertion', [], 'Degrading', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Base', 'Degrading', 'Insertion'} % List of non-constant message properties
        ROSPropertyList = {'base', 'degrading', 'insertion'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Config(msg)
            %Config Construct the message object Config
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function base = get.Base(obj)
            %get.Base Get the value for property Base
            if isempty(obj.Cache.Base)
                obj.Cache.Base = feval(obj.OctomapPaMsgsConfigBaseClass, obj.JavaMessage.getBase);
            end
            base = obj.Cache.Base;
        end
        
        function set.Base(obj, base)
            %set.Base Set the value for property Base
            validateattributes(base, {obj.OctomapPaMsgsConfigBaseClass}, {'nonempty', 'scalar'}, 'Config', 'Base');
            
            obj.JavaMessage.setBase(base.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Base)
                obj.Cache.Base.setJavaObject(base.getJavaObject);
            end
        end
        
        function insertion = get.Insertion(obj)
            %get.Insertion Get the value for property Insertion
            if isempty(obj.Cache.Insertion)
                obj.Cache.Insertion = feval(obj.OctomapPaMsgsConfigInsertionClass, obj.JavaMessage.getInsertion);
            end
            insertion = obj.Cache.Insertion;
        end
        
        function set.Insertion(obj, insertion)
            %set.Insertion Set the value for property Insertion
            validateattributes(insertion, {obj.OctomapPaMsgsConfigInsertionClass}, {'nonempty', 'scalar'}, 'Config', 'Insertion');
            
            obj.JavaMessage.setInsertion(insertion.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Insertion)
                obj.Cache.Insertion.setJavaObject(insertion.getJavaObject);
            end
        end
        
        function degrading = get.Degrading(obj)
            %get.Degrading Get the value for property Degrading
            if isempty(obj.Cache.Degrading)
                obj.Cache.Degrading = feval(obj.OctomapPaMsgsConfigDegradingClass, obj.JavaMessage.getDegrading);
            end
            degrading = obj.Cache.Degrading;
        end
        
        function set.Degrading(obj, degrading)
            %set.Degrading Set the value for property Degrading
            validateattributes(degrading, {obj.OctomapPaMsgsConfigDegradingClass}, {'nonempty', 'scalar'}, 'Config', 'Degrading');
            
            obj.JavaMessage.setDegrading(degrading.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Degrading)
                obj.Cache.Degrading.setJavaObject(degrading.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Base = [];
            obj.Cache.Insertion = [];
            obj.Cache.Degrading = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Base = copy(obj.Base);
            cpObj.Insertion = copy(obj.Insertion);
            cpObj.Degrading = copy(obj.Degrading);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Base = feval([obj.OctomapPaMsgsConfigBaseClass '.loadobj'], strObj.Base);
            obj.Insertion = feval([obj.OctomapPaMsgsConfigInsertionClass '.loadobj'], strObj.Insertion);
            obj.Degrading = feval([obj.OctomapPaMsgsConfigDegradingClass '.loadobj'], strObj.Degrading);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Base = saveobj(obj.Base);
            strObj.Insertion = saveobj(obj.Insertion);
            strObj.Degrading = saveobj(obj.Degrading);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.octomap_pa_msgs.Config.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.octomap_pa_msgs.Config;
            obj.reload(strObj);
        end
    end
end
