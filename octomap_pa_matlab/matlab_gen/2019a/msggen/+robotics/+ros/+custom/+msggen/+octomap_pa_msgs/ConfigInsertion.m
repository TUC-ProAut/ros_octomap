classdef ConfigInsertion < robotics.ros.Message
    %ConfigInsertion MATLAB implementation of octomap_pa_msgs/ConfigInsertion
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'octomap_pa_msgs/ConfigInsertion' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '686160f192c69028098dbfdc2f046f64' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        PcdExplicitTransform
        PcdVoxelActive
        PcdVoxelExplicit
        PcdVoxelExplicitRelativeResolution
        MapProbHit
        MapProbMiss
        MapProbThreshold
        MapClampMin
        MapClampMax
    end
    
    properties (Constant, Hidden)
        PropertyList = {'MapClampMax', 'MapClampMin', 'MapProbHit', 'MapProbMiss', 'MapProbThreshold', 'PcdExplicitTransform', 'PcdVoxelActive', 'PcdVoxelExplicit', 'PcdVoxelExplicitRelativeResolution'} % List of non-constant message properties
        ROSPropertyList = {'map_clamp_max', 'map_clamp_min', 'map_prob_hit', 'map_prob_miss', 'map_prob_threshold', 'pcd_explicit_transform', 'pcd_voxel_active', 'pcd_voxel_explicit', 'pcd_voxel_explicit_relative_resolution'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigInsertion(msg)
            %ConfigInsertion Construct the message object ConfigInsertion
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function pcdexplicittransform = get.PcdExplicitTransform(obj)
            %get.PcdExplicitTransform Get the value for property PcdExplicitTransform
            pcdexplicittransform = logical(obj.JavaMessage.getPcdExplicitTransform);
        end
        
        function set.PcdExplicitTransform(obj, pcdexplicittransform)
            %set.PcdExplicitTransform Set the value for property PcdExplicitTransform
            validateattributes(pcdexplicittransform, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'PcdExplicitTransform');
            
            obj.JavaMessage.setPcdExplicitTransform(pcdexplicittransform);
        end
        
        function pcdvoxelactive = get.PcdVoxelActive(obj)
            %get.PcdVoxelActive Get the value for property PcdVoxelActive
            pcdvoxelactive = logical(obj.JavaMessage.getPcdVoxelActive);
        end
        
        function set.PcdVoxelActive(obj, pcdvoxelactive)
            %set.PcdVoxelActive Set the value for property PcdVoxelActive
            validateattributes(pcdvoxelactive, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'PcdVoxelActive');
            
            obj.JavaMessage.setPcdVoxelActive(pcdvoxelactive);
        end
        
        function pcdvoxelexplicit = get.PcdVoxelExplicit(obj)
            %get.PcdVoxelExplicit Get the value for property PcdVoxelExplicit
            pcdvoxelexplicit = logical(obj.JavaMessage.getPcdVoxelExplicit);
        end
        
        function set.PcdVoxelExplicit(obj, pcdvoxelexplicit)
            %set.PcdVoxelExplicit Set the value for property PcdVoxelExplicit
            validateattributes(pcdvoxelexplicit, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'PcdVoxelExplicit');
            
            obj.JavaMessage.setPcdVoxelExplicit(pcdvoxelexplicit);
        end
        
        function pcdvoxelexplicitrelativeresolution = get.PcdVoxelExplicitRelativeResolution(obj)
            %get.PcdVoxelExplicitRelativeResolution Get the value for property PcdVoxelExplicitRelativeResolution
            pcdvoxelexplicitrelativeresolution = single(obj.JavaMessage.getPcdVoxelExplicitRelativeResolution);
        end
        
        function set.PcdVoxelExplicitRelativeResolution(obj, pcdvoxelexplicitrelativeresolution)
            %set.PcdVoxelExplicitRelativeResolution Set the value for property PcdVoxelExplicitRelativeResolution
            validateattributes(pcdvoxelexplicitrelativeresolution, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'PcdVoxelExplicitRelativeResolution');
            
            obj.JavaMessage.setPcdVoxelExplicitRelativeResolution(pcdvoxelexplicitrelativeresolution);
        end
        
        function mapprobhit = get.MapProbHit(obj)
            %get.MapProbHit Get the value for property MapProbHit
            mapprobhit = single(obj.JavaMessage.getMapProbHit);
        end
        
        function set.MapProbHit(obj, mapprobhit)
            %set.MapProbHit Set the value for property MapProbHit
            validateattributes(mapprobhit, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'MapProbHit');
            
            obj.JavaMessage.setMapProbHit(mapprobhit);
        end
        
        function mapprobmiss = get.MapProbMiss(obj)
            %get.MapProbMiss Get the value for property MapProbMiss
            mapprobmiss = single(obj.JavaMessage.getMapProbMiss);
        end
        
        function set.MapProbMiss(obj, mapprobmiss)
            %set.MapProbMiss Set the value for property MapProbMiss
            validateattributes(mapprobmiss, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'MapProbMiss');
            
            obj.JavaMessage.setMapProbMiss(mapprobmiss);
        end
        
        function mapprobthreshold = get.MapProbThreshold(obj)
            %get.MapProbThreshold Get the value for property MapProbThreshold
            mapprobthreshold = single(obj.JavaMessage.getMapProbThreshold);
        end
        
        function set.MapProbThreshold(obj, mapprobthreshold)
            %set.MapProbThreshold Set the value for property MapProbThreshold
            validateattributes(mapprobthreshold, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'MapProbThreshold');
            
            obj.JavaMessage.setMapProbThreshold(mapprobthreshold);
        end
        
        function mapclampmin = get.MapClampMin(obj)
            %get.MapClampMin Get the value for property MapClampMin
            mapclampmin = single(obj.JavaMessage.getMapClampMin);
        end
        
        function set.MapClampMin(obj, mapclampmin)
            %set.MapClampMin Set the value for property MapClampMin
            validateattributes(mapclampmin, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'MapClampMin');
            
            obj.JavaMessage.setMapClampMin(mapclampmin);
        end
        
        function mapclampmax = get.MapClampMax(obj)
            %get.MapClampMax Get the value for property MapClampMax
            mapclampmax = single(obj.JavaMessage.getMapClampMax);
        end
        
        function set.MapClampMax(obj, mapclampmax)
            %set.MapClampMax Set the value for property MapClampMax
            validateattributes(mapclampmax, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigInsertion', 'MapClampMax');
            
            obj.JavaMessage.setMapClampMax(mapclampmax);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.PcdExplicitTransform = obj.PcdExplicitTransform;
            cpObj.PcdVoxelActive = obj.PcdVoxelActive;
            cpObj.PcdVoxelExplicit = obj.PcdVoxelExplicit;
            cpObj.PcdVoxelExplicitRelativeResolution = obj.PcdVoxelExplicitRelativeResolution;
            cpObj.MapProbHit = obj.MapProbHit;
            cpObj.MapProbMiss = obj.MapProbMiss;
            cpObj.MapProbThreshold = obj.MapProbThreshold;
            cpObj.MapClampMin = obj.MapClampMin;
            cpObj.MapClampMax = obj.MapClampMax;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.PcdExplicitTransform = strObj.PcdExplicitTransform;
            obj.PcdVoxelActive = strObj.PcdVoxelActive;
            obj.PcdVoxelExplicit = strObj.PcdVoxelExplicit;
            obj.PcdVoxelExplicitRelativeResolution = strObj.PcdVoxelExplicitRelativeResolution;
            obj.MapProbHit = strObj.MapProbHit;
            obj.MapProbMiss = strObj.MapProbMiss;
            obj.MapProbThreshold = strObj.MapProbThreshold;
            obj.MapClampMin = strObj.MapClampMin;
            obj.MapClampMax = strObj.MapClampMax;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.PcdExplicitTransform = obj.PcdExplicitTransform;
            strObj.PcdVoxelActive = obj.PcdVoxelActive;
            strObj.PcdVoxelExplicit = obj.PcdVoxelExplicit;
            strObj.PcdVoxelExplicitRelativeResolution = obj.PcdVoxelExplicitRelativeResolution;
            strObj.MapProbHit = obj.MapProbHit;
            strObj.MapProbMiss = obj.MapProbMiss;
            strObj.MapProbThreshold = obj.MapProbThreshold;
            strObj.MapClampMin = obj.MapClampMin;
            strObj.MapClampMax = obj.MapClampMax;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.octomap_pa_msgs.ConfigInsertion.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.octomap_pa_msgs.ConfigInsertion;
            obj.reload(strObj);
        end
    end
end
