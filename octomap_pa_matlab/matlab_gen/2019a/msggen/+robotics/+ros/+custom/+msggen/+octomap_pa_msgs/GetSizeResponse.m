classdef GetSizeResponse < robotics.ros.Message
    %GetSizeResponse MATLAB implementation of octomap_pa_msgs/GetSizeResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'octomap_pa_msgs/GetSizeResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ea0be6a58e7e49697448514d237b5c26' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Size
        Memoryusage
        CountCloud
        CountCloudOld
        CountLaser
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CountCloud', 'CountCloudOld', 'CountLaser', 'Memoryusage', 'Size'} % List of non-constant message properties
        ROSPropertyList = {'count_cloud', 'count_cloud_old', 'count_laser', 'memoryusage', 'size'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GetSizeResponse(msg)
            %GetSizeResponse Construct the message object GetSizeResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function size = get.Size(obj)
            %get.Size Get the value for property Size
            size = int32(obj.JavaMessage.getSize);
        end
        
        function set.Size(obj, size)
            %set.Size Set the value for property Size
            validateattributes(size, {'numeric'}, {'nonempty', 'scalar'}, 'GetSizeResponse', 'Size');
            
            obj.JavaMessage.setSize(size);
        end
        
        function memoryusage = get.Memoryusage(obj)
            %get.Memoryusage Get the value for property Memoryusage
            memoryusage = int64(obj.JavaMessage.getMemoryusage);
        end
        
        function set.Memoryusage(obj, memoryusage)
            %set.Memoryusage Set the value for property Memoryusage
            validateattributes(memoryusage, {'numeric'}, {'nonempty', 'scalar'}, 'GetSizeResponse', 'Memoryusage');
            
            obj.JavaMessage.setMemoryusage(memoryusage);
        end
        
        function countcloud = get.CountCloud(obj)
            %get.CountCloud Get the value for property CountCloud
            countcloud = int32(obj.JavaMessage.getCountCloud);
        end
        
        function set.CountCloud(obj, countcloud)
            %set.CountCloud Set the value for property CountCloud
            validateattributes(countcloud, {'numeric'}, {'nonempty', 'scalar'}, 'GetSizeResponse', 'CountCloud');
            
            obj.JavaMessage.setCountCloud(countcloud);
        end
        
        function countcloudold = get.CountCloudOld(obj)
            %get.CountCloudOld Get the value for property CountCloudOld
            countcloudold = int32(obj.JavaMessage.getCountCloudOld);
        end
        
        function set.CountCloudOld(obj, countcloudold)
            %set.CountCloudOld Set the value for property CountCloudOld
            validateattributes(countcloudold, {'numeric'}, {'nonempty', 'scalar'}, 'GetSizeResponse', 'CountCloudOld');
            
            obj.JavaMessage.setCountCloudOld(countcloudold);
        end
        
        function countlaser = get.CountLaser(obj)
            %get.CountLaser Get the value for property CountLaser
            countlaser = int32(obj.JavaMessage.getCountLaser);
        end
        
        function set.CountLaser(obj, countlaser)
            %set.CountLaser Set the value for property CountLaser
            validateattributes(countlaser, {'numeric'}, {'nonempty', 'scalar'}, 'GetSizeResponse', 'CountLaser');
            
            obj.JavaMessage.setCountLaser(countlaser);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Size = obj.Size;
            cpObj.Memoryusage = obj.Memoryusage;
            cpObj.CountCloud = obj.CountCloud;
            cpObj.CountCloudOld = obj.CountCloudOld;
            cpObj.CountLaser = obj.CountLaser;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Size = strObj.Size;
            obj.Memoryusage = strObj.Memoryusage;
            obj.CountCloud = strObj.CountCloud;
            obj.CountCloudOld = strObj.CountCloudOld;
            obj.CountLaser = strObj.CountLaser;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Size = obj.Size;
            strObj.Memoryusage = obj.Memoryusage;
            strObj.CountCloud = obj.CountCloud;
            strObj.CountCloudOld = obj.CountCloudOld;
            strObj.CountLaser = obj.CountLaser;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.octomap_pa_msgs.GetSizeResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.octomap_pa_msgs.GetSizeResponse;
            obj.reload(strObj);
        end
    end
end
